apply plugin: 'com.android.library'

def cfg    = rootProject.ext.android
def appId  = rootProject.ext.appId
def java_8 = JavaVersion.VERSION_1_8

android {
    compileSdkVersion cfg.COMLIER_SDK_VERSION
    buildToolsVersion cfg.BUILD_TOOLS_VERSION


    defaultConfig {
        minSdkVersion cfg.MIN_SDK_VERSION
        targetSdkVersion cfg.TAR_SDK_VERSION
        versionCode cfg.VERSION_CODE
        versionName cfg.VERSION_NAME

        testInstrumentationRunner cfg.testInstrumentationRunner
        consumerProguardFiles 'consumer-rules.pro'

        dexOptions {
            //支持大型项目
            jumboMode = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // Tinker 热修复
    api("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    // Maven local cannot handle transist dependencies.
    implementation("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") {
        changing = true
    }
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    implementation "com.android.support:multidex:1.0.1"

    implementation project(path: ':Provider')
}
