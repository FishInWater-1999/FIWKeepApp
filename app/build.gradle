apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_8
// ${buildDir} 代表 app/module 下的 build 文件夹
// 如果创建成功的话，会直接在 build 目录下，创建一个 bakApk 文件夹，然后春芳我们的 oldApk
def bakPath = file("${buildDir}/bakApk")

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.fishinwater.situp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        // 签名打包
        release {
            storeFile file("release.keystore")
            storePassword "123456"
            keyAlias "fiw"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main { assets.srcDirs = ['src/main/assets', 'src/main/assets/', 'src/main/assets/2'] }
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    dexOptions {
        //支持大型项目
        jumboMode = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    // AndFix 热修复
    // implementation 'com.alipay.euler:andfix:0.5.0@aar'
    // Tinker 热修复
    // Tinker 的注解库  在生成 application 时使用     /* provided 库： 1. 只参与编译 2. 不参与打包 3. 从而减少 Apk 包的体积 */
    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    // tinker 的核心 SDK 库                         /* compile 作用：1. 不仅在编译时去使用。 2. 而且会把库打包到 apk 中 */
    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    // OkHttp-Utils
    implementation 'com.zhy:okhttputils:2.6.2'
    // OkHttp3
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okio:okio:1.8.0'
    // Butter Knife
    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    // Gson 服务器数据交互
    implementation 'com.google.code.gson:gson:2.8.6'
    // Tinker 支持分包
    implementation 'com.android.support:multidex:1.0.3'
}

// Tinker 只是在修改 APK bug 时才使用的，平时调试程序时并不需要
// 所以我们设置一个'开关'，来控制 Tinker 的使用
ext {
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/app-release-1114-21-16-23.apk"
    // tinkerID 与应用的 versionName 的值一样
    tinkerID = "1.0.0"
    // 下面两个，生成 apk 时会生成对应文件，然后在 '/' 后加上文件名即可
    tinkerApplyMappingPath = "${bakPath}/app-release-1114-21-16-23-mapping.txt"
    tinkerApplyResourceMappingPath = "${bakPath}/app-release-1114-21-16-23-R.txt"
}

def buildWithTinker() {
    return ext.tinkerEnable
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourceMappingPath
}

def getTinkerIdValue() {
    return ext.tinkerID
}

if(buildWithTinker()) {
    // 启用 Tinker
    apply plugin: 'com.tencent.tinker.patch'

    // 配置 Tinker 中的参数
    tinkerPatch {
        // 以方法形式配置，方便修改
        // 指定 old apk 文件路径
        oldApk = getOldApkPath()
        // 在生成 patch 时，如果 Tinker 发出 warning 说明代码有问题
        // 如果这里为 false ，则 tinker 发出 warring 后 tinker 自动结束
        ignoreWarning = false
        // 是否签名，需要使用，防止 patch 被人篡改
        useSign = true
        // 指定是否启用 Tinker
        tinkerEnable = buildWithTinker();

        buildConfig {
            // 传入 old.apk 打包时使用的混淆文件
            // 因为 patch 也是需要混淆的
            applyMapping = getApplyMappingPath()
            // 指定 old.apk 使用的资源文件
            applyResourceMapping = getApplyResourceMappingPath()
            // 配置 TinkerID
            tinkerId = getTinkerIdValue()
            // 一般设为 false 他是在 app 使用 dex 时进行的一些操作
            // 如果为 true 则会根据 dex 的分包，动态的生成 patch
            keepDexApply = false
        }

        dex {
            // Tinker 指定了 'raw' 模式或 'jar' 模式
            // 开发中一般也是 'jar' 模式
            // 区别是 'jar' 模式，适配到的 api 是 14 以上和以下，使用时 dex 文件会被压缩为 jar ， 因此文件体积也会相对小一些，所以推荐使用
            // 而 'raw' 只能在 14 以上使用，使用时 tinker 不压缩，直接用 'dex' 文件
            dexMode = "jar"
            // 通配符，表明要处理的 dex 文件（ classes*.dex ）都在哪些路径下
            // 通过数组，指定多个路径
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
            // 在加载 patch 包过程中要用到的类
            loader = ["com.fishinwater.situp.tinker.MyTinkerApplication"]
        }

        // 由于 tinker 还可以对工程中 jar 包等进行替换
        // 所以配置这个 lib 来指定工程中的 jar 包，和 so 都在哪里
        lib {
            pattern = ["libs/*/*.so"]
        }

        // 指定 tinker 可以修改的所有资源路径
        res {
            pattern = ["res/*", "assets/*", "resources.arcs", "AndroidManifest.xml"]
            // 指定哪些资源即使修改了 Tinker 也不做处理
            ignoreChange = ["assets/sample_meta.txt"]
            // 如果资源文件超过了 100K ， tinker 会相应算法进行压缩
            largeModSize = 100
        }

        packageConfig {
            // 里面都是 key - value 的键值对
            // patchMessage 由于说明本次版本的信息
            configField("patchMessage", "fix the 1.0 version's bugs")
            // 本次 patch 文件的版本号
            configField("patchVersion", "1.0")

        }

        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }

    }

    //是否有多渠道
    List<String> flavors = new ArrayList<>()
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0

    /**
     * 引入脚本，用于：
     *
     * 1. 备份基础 apk
     * 2. 和所有资源文件/混淆文件的 mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs[0].outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}
